a <- available.packages()
a <- available.packages()head(rownames(a), 3)
head(rownames(a), 3)
install.packages(c("slidify", "ggplot2", "devtools"))
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("GenomicFeatures", "AnnotationDbi"))
library(ggplot2)
search()
find.package("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
load("C:/Users/alexj/Desktop/Hobbies/Kaggle/Titanic/.RData")
getwd()
read.csv("mydata.csv")
x <- 0:6
as.numeric(x)
as.logical(x)
as.character(x)
x <- c("a", "b", "c")
as.numeric(x)
as.logical(x)
as.complex(x)
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0,10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2) times = 10)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2) each = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- (0.5, 55, -10, 6)
num_vect <- [0.5, 55, -10, 6]
num_vect(c(0.5, 55, -10, 6))
num_vect <- (c(0.5, 55, -10, 6))
?c
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vest < 1
tf <- c(num_vest < 1)
tf <- c(num_vect < 1)
tf <- numvect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_car
my_char
paste(my_char, collapse = " ")
c(my_char, "Alex")
my_name <- c(my_char, "Alex")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep ="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
M-data <- sample(c(y, z), 100)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data = NA
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
idenitcal(my_matrix, my_matrix2)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
?cbind
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 , 7
6 < 7
10 <= 10
5 != 7
5 != 7
5 !== 7
5 !!= 7
info()
7 != 5
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 9 || 6 != 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
class(flags)
viewinfo()
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_color, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean/length)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem)elem[2])
sapply(flags, unique)
ok()
sapply(flags, class)
vapply(flags, class, numeric(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmasses[1:6], summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
?head
head(plants, n = 6L)
head(plants, n = 10L)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colmeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
add2 <- function(x, y) {
x + y
}
add(3, 5)
add2(3, 5)
}
above <- function(x, n){
use <- x > n
x[use]
}
x <- 1:20
above(x)
above(x, 12)
above <- function(x, n = 10){
use <- x > n
x[use]
}
above(x)
columnmean <- funciton(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <-mean(y[, i])
}
means
}
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <-mean(y[, i])
}
means
}
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <-mean(y[, i], na.rm = removeNA)
}
means
}
y <- c(1, 2, 3)
z <- c(4, 5, 6)
a <- dataframe(y, z)
a <- data.frame(y, z)
columnmean(a)
?function
]
?function
)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, sum)
?apply
rowSums = apply(x, 1, sum)
?rowSums
apply(x, 1, quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2*2*10), c(2, 2, 10))
apply(a, c(1, 2), mean)
rowMeans(a, dims = 2)
str(mapply)
mapply(rep, 1:4, 4:1)
?mapply
noise <- function(n, mean, sd){
rnorm(n, mean, sd)
}
noise(5, 1, 2)
mapply(noise, 1:5, 1:5, 2)
str(tapply)
x <- c(rnomr(10), runif(10), rnorm(10, 1))
x <- c(rnom(10), runif(10), rnorm(10, 1))
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
?gl
f
tapply(x, f, mean)
tapply(x, f, range)
str(split)
split(x, f)
library(datasets)
head(airquality)
ls(datasets)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colmeans(x[, c("Ozone", "Solar.R", "Wind")]))
?colMeans
?traceback
?debug()
mean(y)
traceback()
lm(y-z)
traceback()
debug(lm)
lm(y-z)
library(datasets)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
ls
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
?script
makeVector(2)
getmean = getmean)
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
?solve
}
traceback()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
?source
source("makeVector")
source("makeVector.R")
getwd()
setwd("E:\R programming\Data")
setwd("H:\datasciencecoursera\ProgrammingAssignment2")
setwd("H:/datasciencecoursera/ProgrammingAssignment2")
source("makeVector.R")
makeVector(2)
makeVector(2:5)
x <- 2
y <- makeVector(2)
cahemean(y)
cachemean(y)
cachemean(2)
?matrix
x <- matrix(1:4, 2, 2)
x
source("cachematrix.R")
makeCacheMatrix(x)
cachemean(y)
}
source("cachematrix.R")
makeCacheMatrix(x)
z <- makeCacheMatrix(x)
cacheSolve(z)
traceback()
size <- 1000
mymatrix <- matrix(rnorm(siz^2), nrow=size, ncol=size)
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
special.matrix <- makeCacheMatrix(mymatrix)
special.solved.1 <- cacheSolve(special.matrix)
special.matrix <- makeCacheMatrix(mymatrix)
list(set = set, get = get, setSolve = setSolve, getSolve = getSolve)
source("cachematrix.R")
special.matrix <- makeCacheMatrix(mymatrix)
special.solved.1 <- cacheSolve(special.matrix)
m <- x$getSolve()
m <- special.matrix$getSolve()
if(!is.null(m)) {
message("getting cached data")
return(m)}
?mean
?solve
source('H:/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source("cachematrix.R")
special.matrix <- makeCacheMatrix(mymatrix)
special.solved.1 <- cacheSolve(special.matrix)
source('H:/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('H:/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('H:/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('H:/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
special.solved.1 <- cacheSolve(special.matrix)
source('H:/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
special.solved.2 <- cacheSolve(special.matrix)
identical(mymatrix.inverse, special.solved.1) & identical(mymatrix.inverse, special.solved.2)
identical(mymatrix.inverse, special.solved.1)
identical(mymatrix.inverse, special.solved.2)
source('H:/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('H:/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
